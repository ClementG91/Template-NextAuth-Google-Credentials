// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  cryptoLoginNonce CryptoLoginNonce?
  publicAddress    String?           @unique // Added to enable crypto authentication

  @@map("users")
}

model VerificationToken {
  id            String    @id @default(cuid()) @map("_id")
  identifier    String
  token         String   @unique
  expires       DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model CryptoLoginNonce {
  userId  String    @id @default(cuid()) @map("_id")
  nonce   String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}